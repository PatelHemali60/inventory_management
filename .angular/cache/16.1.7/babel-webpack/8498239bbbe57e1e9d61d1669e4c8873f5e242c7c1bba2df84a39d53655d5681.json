{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let AddRoleComponent = class AddRoleComponent {\n  constructor(fb, roleService, router, route) {\n    this.fb = fb;\n    this.roleService = roleService;\n    this.router = router;\n    this.route = route;\n    this.userForm = this.buildUsersForm();\n    this.departments = [];\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n  }\n  //On init get department list and ckeck if its addMode\n  ngOnInit() {\n    this.getDepartmentList();\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n    if (!this.isAddMode) {\n      this.roleService.getById(this.id).subscribe(x => this.userForm.patchValue(x));\n    }\n  }\n  //Reactive Form\n  buildUsersForm() {\n    return this.fb.group({\n      Name: [null, Validators.required],\n      Description: [null, Validators.required],\n      IsActive: ['false', Validators.required]\n    });\n  }\n  // role:\n  // {\n  //   \"Id\": 0,\n  //   \"Name\": \"string\",\n  //   \"Description\": \"string\",\n  //   \"IsActive\": true\n  // }\n  //get department list from db\n  getDepartmentList() {\n    this.roleService.getDepartments().subscribe({\n      next: data => {\n        this.departments = data;\n      },\n      error: e => console.log(e)\n    });\n  }\n  //Post data to db\n  addRole() {\n    this.roleData = {\n      productname: this.userForm.value.productname,\n      category: this.userForm.value.category,\n      Subcategory: this.userForm.value.Subcategory\n    };\n    console.log(this.productData, 'dataaaaaaaa');\n    this.roleService.AddRole(this.productData).subscribe({\n      next: () => {\n        this.onSubmitData.emit(this.productData);\n        this.navigateToList();\n      },\n      error: e => console.log(e)\n    });\n  }\n  //on Form submit\n  //on Form submit\n  onSubmit() {\n    console.log('hello there');\n    if (this.isAddMode) {\n      this.createProduct();\n    } else {\n      this.updateUser();\n    }\n  }\n  //Put data to db\n  updateUser() {\n    this.usersService.updateProduct(this.id, this.userForm.value).subscribe({\n      next: () => {\n        this.navigateToList();\n      },\n      error: e => console.log(e)\n    });\n  }\n  navigateToList() {\n    this.router.navigate(['/inventory']);\n  }\n  //Rest to form controls\n  onRest() {\n    this.userForm.reset();\n  }\n  onCancel() {\n    this.cancel.emit();\n  }\n};\n__decorate([Output()], AddRoleComponent.prototype, \"cancel\", void 0);\n__decorate([Output()], AddRoleComponent.prototype, \"onSubmitData\", void 0);\nAddRoleComponent = __decorate([Component({\n  selector: 'app-add-role',\n  templateUrl: './add-role.component.html',\n  styleUrls: ['./add-role.component.scss']\n})], AddRoleComponent);","map":{"version":3,"names":["Component","Output","Validators","AddRoleComponent","constructor","fb","roleService","router","route","userForm","buildUsersForm","departments","id","snapshot","params","isAddMode","ngOnInit","getDepartmentList","getById","subscribe","x","patchValue","group","Name","required","Description","IsActive","getDepartments","next","data","error","e","console","log","addRole","roleData","productname","value","category","Subcategory","productData","AddRole","onSubmitData","emit","navigateToList","onSubmit","createProduct","updateUser","usersService","updateProduct","navigate","onRest","reset","onCancel","cancel","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\pc1\\Desktop\\inventory_dashboard\\inventory\\src\\app\\modules\\role\\add-role\\add-role.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { RoleService } from '../service/role.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-role',\n  templateUrl: './add-role.component.html',\n  styleUrls: ['./add-role.component.scss']\n})\nexport class AddRoleComponent {\n\n\n  @Output() cancel !: EventEmitter<Event>;\n  @Output() onSubmitData!: EventEmitter<Event>\n\n  public userForm: FormGroup;\n  public departments: product[];\n  private id: number;\n  private isAddMode: boolean;\n;\n\n\n  constructor(private fb: FormBuilder, private roleService: RoleService, private router: Router, private route: ActivatedRoute,) {\n    this.userForm = this.buildUsersForm();\n    this.departments = [];\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n\n  }\n\n\n  //On init get department list and ckeck if its addMode\n  ngOnInit(): void {\n    this.getDepartmentList();\n\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n\n    if (!this.isAddMode) {\n      this.roleService.getById(this.id).subscribe(x => this.userForm.patchValue(x));\n    }\n  }\n\n  //Reactive Form\n  private buildUsersForm(): FormGroup {\n    return this.fb.group({\n      Name: [null, Validators.required],\n      Description:[null,Validators.required],\n      IsActive:['false',Validators.required],\n    });\n  }\n\n  // role:\n  // {\n  //   \"Id\": 0,\n  //   \"Name\": \"string\",\n  //   \"Description\": \"string\",\n  //   \"IsActive\": true\n  // }\n\n  //get department list from db\n  private getDepartmentList(): void {\n    this.roleService.getDepartments().subscribe({\n      next:(data: any[]) => {\n        this.departments = data;\n      },\n      error:(e) => console.log(e)\n    });\n  }\n\n\n\n     //Post data to db\n  public addRole(): void {\n\n    this.roleData = {\n      productname: this.userForm.value.productname,\n      category: this.userForm.value.category,\n      Subcategory:this.userForm.value.Subcategory\n    }\n\n    console.log(this.productData, 'dataaaaaaaa');\n\n    this.roleService.AddRole(this.productData).subscribe({\n      next:() => {\n        this.onSubmitData.emit(this.productData);\n        this.navigateToList();\n      },\n      error:(e:any) => console.log(e)\n    });\n  }\n\n  //on Form submit\n  //on Form submit\n  public onSubmit(): void {\n    console.log('hello there')\n    if (this.isAddMode) {\n      this.createProduct();\n    }\n    else {\n      this.updateUser();\n    }\n  }\n\n   //Put data to db\n   public updateUser(): void {\n\n    this.usersService.updateProduct(this.id, this.userForm.value).subscribe({\n      next: () => {\n\n        this.navigateToList();\n      },\n      error: (e:any) => console.log(e)\n    })\n  }\n\n\n  public navigateToList(): void {\n    this.router.navigate(['/inventory'])\n  }\n\n  //Rest to form controls\n  onRest() {\n    this.userForm.reset();\n  }\n\n  onCancel(){\n    this.cancel.emit();\n  }\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}